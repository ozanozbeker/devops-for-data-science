---
title: "Penguins Model"
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
---

## Initialize
```{r}
library(glmnet)
library(tidymodels)
library(vetiver)
library(pins)
library(plumber)
library(DBI)
library(dbplyr)

con = dbConnect(duckdb::duckdb(dbdir = "../data/do4ds.duckdb"))
```

## Data Clean
```{r}
penguins_clean = tbl(con, "penguins") |> 
  filter(!if_any(everything(), is.na)) |> 
  collect()

head(penguins_clean)

dbDisconnect(con)
```

## Define Model and Fit
```{r}
# Define the recipe
penguin_recipe = recipe(body_mass_g ~ ., data = penguins_clean) |> 
  step_dummy(all_nominal_predictors(), -all_outcomes(), one_hot = TRUE) |> 
  step_zv(all_predictors()) |>  # Remove zero variance predictors
  step_corr(all_numeric_predictors(), threshold = 0.9)  # Remove highly correlated predictors

# Define the model with Ridge regression
penguin_model = linear_reg(penalty = 0.1, mixture = 0) |> 
  set_engine("glmnet")

# Create a workflow
penguin_workflow = workflow() |> 
  add_recipe(penguin_recipe) |> 
  add_model(penguin_model)

# Fit the model
penguin_fit = penguin_workflow |> 
  fit(data = penguins_clean)
```

## Turn into Vetiver model
```{r}
v = vetiver_model(
  model = penguin_fit, 
  model_name = "penguin_lm",
  save_prototype = penguins_clean |> select(-body_mass_g))

# Print the vetiver model information
print(v)
```

## Save to Board
```{r}
model_board = board_folder("../data/model")

model_board |> vetiver_pin_write(v)
```

```{r}
vetiver_prepare_docker(
  model_board,
  "penguin_lm",
  path = "."
)
```